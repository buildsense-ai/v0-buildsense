"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { useToast } from "@/components/ui/use-toast"
import { FileText, Loader2, FileDown, ExternalLink, File } from "lucide-react"
import type { IssueCard, ApiDocument } from "@/lib/types"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import axios from "axios"

interface IssueCardDocumentsProps {
  issue: IssueCard
  showDetails: boolean
}

export function IssueCardDocuments({ issue, showDetails }: IssueCardDocumentsProps) {
  const [isGeneratingDoc, setIsGeneratingDoc] = useState(false)
  const [generatedDocUrl, setGeneratedDocUrl] = useState<string | null>(null)
  const [apiDocuments, setApiDocuments] = useState<ApiDocument[]>([])
  const [isLoadingDocs, setIsLoadingDocs] = useState(false)
  const { toast } = useToast()

  // Fetch documents when details are shown
  useEffect(() => {
    if (showDetails && issue.eventId) {
      fetchDocuments()
    }
  }, [showDetails, issue.eventId])

  const fetchDocuments = async () => {
    if (!issue.eventId) return

    setIsLoadingDocs(true)
    try {
      const response = await axios.get("/api/documents")
      if (response.data && Array.isArray(response.data)) {
        const relatedDocs = response.data.filter((doc: ApiDocument) => doc.event_id === issue.eventId)
        setApiDocuments(relatedDocs)
      }
    } catch (error) {
      console.error("获取文档列表失败")
    } finally {
      setIsLoadingDocs(false)
    }
  }

  const extractFileName = (url: string): string => {
    const parts = url.split("/")
    return parts[parts.length - 1] || "未命名文档"
  }

  const handleAutoGenerateDoc = async () => {
    if (!issue.eventId) {
      toast({
        title: "生成失败",
        description: "无法找到事件ID",
        variant: "destructive",
      })
      return
    }

    setIsGeneratingDoc(true)
    setGeneratedDocUrl(null)

    try {
      const response = await axios.get(`/api/generate-doc/${issue.eventId}`)
      if (response.data?.doc_url) {
        setGeneratedDocUrl(response.data.doc_url)
        toast({ title: "文档生成成功" })
        fetchDocuments()
      }
    } catch (error) {
      toast({
        title: "生成失败",
        variant: "destructive",
      })
    } finally {
      setIsGeneratingDoc(false)
    }
  }

  return (
    <div className="mt-3 flex flex-col gap-2">
      <div className="flex justify-between items-center">
        <h3 className="font-medium text-sm text-muted-foreground">文档操作</h3>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="outline"
                size="sm"
                className="h-7 text-xs flex items-center gap-1"
                onClick={handleAutoGenerateDoc}
                disabled={isGeneratingDoc || issue.status === "已合并"}
              >
                {isGeneratingDoc ? (
                  <>
                    <Loader2 className="h-3 w-3 animate-spin" />
                    生成中...
                  </>
                ) : (
                  <>
                    <FileText className="h-3 w-3" />
                    自动生成文档
                  </>
                )}
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>根据卡片内容自动生成文档</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </div>

      {generatedDocUrl && (
        <div className="flex items-center gap-2 p-2 bg-muted/50 rounded-md">
          <FileDown className="h-4 w-4 text-primary" />
          <Button
            variant="link"
            size="sm"
            className="h-auto p-0 text-xs"
            onClick={() => window.open(generatedDocUrl, "_blank")}
          >
            下载生成的文档
            <ExternalLink className="ml-1 h-3 w-3" />
          </Button>
        </div>
      )}

      {showDetails && (
        <div>
          <h3 className="font-medium text-sm text-muted-foreground mb-1">关联文档</h3>
          {isLoadingDocs ? (
            <div className="flex items-center gap-2 text-xs text-muted-foreground">
              <Loader2 className="h-3 w-3 animate-spin" />
              加载文档中...
            </div>
          ) : apiDocuments.length > 0 ? (
            <div className="space-y-2">
              {apiDocuments.map((doc) => (
                <div key={doc.id} className="flex items-center gap-2 p-2 bg-muted/50 rounded-md">
                  <File className="h-4 w-4 text-primary" />
                  <Button
                    variant="link"
                    size="sm"
                    className="h-auto p-0 text-xs truncate max-w-[200px]"
                    onClick={() => window.open(doc.doc_url, "_blank")}
                  >
                    {extractFileName(doc.doc_url)}
                    <ExternalLink className="ml-1 h-3 w-3 flex-shrink-0" />
                  </Button>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-xs text-muted-foreground">暂无关联文档</p>
          )}
        </div>
      )}
    </div>
  )
}
